image: docker:stable
services:
  - docker:dind


variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

  TESTING_TAG: testing
  RELEASE_TAG: latest
  COMMIT_TAG: $CI_COMMIT_REF_NAME
  IMAGE_SUFFIX: ''

  POSTGRES_DB: project_test_db
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: project_test_pw


stages:
  - test
  - release
  - deploy


.job_template: &enable_registry
  variables:
    TESTING_IMAGE: ${CI_REGISTRY_IMAGE}${IMAGE_SUFFIX}:${TESTING_TAG}
    RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}${IMAGE_SUFFIX}:${RELEASE_TAG}
    TAGGED_IMAGE: ${CI_REGISTRY_IMAGE}${IMAGE_SUFFIX}:${COMMIT_TAG}
    CACHE_IMAGE: ${CI_REGISTRY_IMAGE}${IMAGE_SUFFIX}:${CI_COMMIT_SHORT_SHA}

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  after_script:
    - docker logout $CI_REGISTRY

test-application:
  image: python:3.11
  services:
    - postgres
  stage: test
  variables:
    PRE_COMMIT_HOME: .pre-commit-cache
    PIPENV_VENV_IN_PROJECT: 1
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - apt-get -qq update
    - apt-get -y -qq install git memcached libpcre3-dev libpq-dev > /dev/null
    - pip install -q --upgrade pipenv
    - pipenv install
    - pipenv install --dev
    - pipenv run pip install safety
    - cp .env.gitlab-ci .env
  script:
    - pipenv run pipenv check
    - PRE_COMMIT_HOME=$PRE_COMMIT_HOME pipenv run pre-commit run --all-files
    - pipenv run python manage.py makemigrations --check --dry-run
    - pipenv run coverage run manage.py test
    - pipenv run coverage xml
    - pipenv run coverage report
  cache:
    - key:
        files:
          - Pipfile
          - Pipfile.lock
      paths:
        - .venv
    - key:
        files:
          - .pre-commit-config.yaml
      paths:
        - $PRE_COMMIT_HOME
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 2 days


release-production-image:
  <<: *enable_registry
  stage: release
  allow_failure: false
  when: manual
  dependencies:
    - test-application
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - docker pull $TESTING_IMAGE || true
    - rm -f .env
    - docker build --cache-from $TESTING_IMAGE -t $RELEASE_IMAGE --build-arg release="production-$CI_COMMIT_SHORT_SHA" .
    - docker push $RELEASE_IMAGE

release-testing-image:
  <<: *enable_registry
  stage: release
  dependencies:
    - test-application
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
    - docker pull $TESTING_IMAGE || true
    - docker build --cache-from $TESTING_IMAGE -t $TESTING_IMAGE --build-arg release="testing-$CI_COMMIT_SHORT_SHA" .
    - docker push $TESTING_IMAGE

release-tagged-image:
  <<: *enable_registry
  stage: release
  allow_failure: false
  when: manual
  dependencies:
    - test-application
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $TESTING_IMAGE || true
    - rm -f .env
    - docker build --cache-from $TESTING_IMAGE -t $TAGGED_IMAGE .
    - docker push $TAGGED_IMAGE


deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
  trigger:
    project: "kync/kync-deployment"
    branch: $CI_COMMIT_BRANCH

pages:
  stage: deploy
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies:
    - test-application
  script:
    - ls -lArth
    - mkdir -p public || true
    - mv /htmlcov/ public/
  artifacts:
    paths:
      - public/
    expire_in: 30 days
